services:
  db:
    image: mongo:8
    container_name: mongo_db
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb://localhost:27017/test
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  redis:
    image: redis:latest
    container_name: redis_broker
    ports:
      - "6379:6379"
    healthcheck: # ðŸ”¥ Healthcheck pour Redis
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  backend:
    build: ./back
    container_name: django_backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DJANGO_SECRET_KEY: "my_secret_key"
      DEBUG: "True"
      ALLOWED_HOSTS: "*"
      DATABASE_NAME: "digit_recognizer"
      DATABASE_HOST: "db"
      DATABASE_PORT: "27017"
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    volumes:
      - ./back:/app
    ports:
      - "8000:8000"
    command: >
      sh -c "gunicorn --workers=4 --timeout 300 --bind 0.0.0.0:8000 back.wsgi:application"

  celery_worker:
    build: ./back
    container_name: celery_worker
    depends_on:
      - backend
      - redis
    volumes:
      - ./back:/app
    environment:
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
      DATABASE_NAME: "digit_recognizer"
      DATABASE_HOST: "db"
      DATABASE_PORT: "27017"
    command: celery -A back worker --loglevel=info

  frontend:
    build: ./front
    container_name: react_frontend
    depends_on:
      - backend
    ports:
      - "3000:80"

volumes:
  mongo_data:
